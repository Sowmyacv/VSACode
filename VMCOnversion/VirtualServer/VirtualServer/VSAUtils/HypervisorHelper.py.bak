"""Main file that does all operations on hypervsor

classes defined:
    Base class:
        Hypervisor- Act as base class for all hypervior operations

    Inherited class:
        HyperVHelper - Does all operations on Hyper-V Hypervisor

    Methods:
        get_all_vms_in_hypervisor()    - abstract -get all the VMs in that hypervisor

        compute_free_resources()    - compute teh free resource for perfoming restores
"""

import os
import re
from abc import ABCMeta, abstractmethod
from collections import OrderedDict
from operator import itemgetter

from AutomationUtils import logger
from . import  VMHelper, VirtualServerConstants, VirtualServerUtils, FusionComputeServices
from AutomationUtils import machine
import requests


class Hypervisor(object):
    __metaclass__ = ABCMeta
    """
    Base class for performing all Hypervisor operations

    Methods:
         get_all_vms_in_hypervisor()        - abstract -get all the VMs in HYper-V Host

        compute_free_resources()        - compute the hyperv host and destiantion path
                                                    for perfoming restores

    """
    def __new__(cls, server_host_name,
                host_machine,
                user_name,
                password,
                instance_type,
                commcell):
        """
        Initialize the object based in intstance_type

        server_name (list)  - hypervisor name eg: vcenter name or Hyperv host

        host_machine    (str)  - client of cs where we will execute all hypervisor operations


        """

        hv_type = VirtualServerConstants.hypervisor_type
        if instance_type == hv_type.MS_VIRTUAL_SERVER.value.lower():
            return object.__new__(HyperVHelper)

        if instance_type == hv_type.Fusion_Compute.value.lower():
            return object.__new__(FusionComputeHelper)

    def __init__(self,
                 server_host_name,
                 host_machine,
                 user_name,
                 password,
                 instance_type,
                 commcell):
        """
        Initialize common variables for hypervior
        """
        self.commcell = commcell
        self.instance_type = instance_type
        self.server_list = server_host_name
        self.server_host_name = server_host_name[0]
        self.host_machine = host_machine
        self.user_name = user_name
        self.password = password
        self.instance_type = instance_type
        self._VMs = {}
        self.log = logger.get_log()
        self.utils_path = VirtualServerUtils.UTILS_PATH
        self.machine = machine.Machine(
            self.host_machine, self.commcell)

    @property
    def VMs(self):
        """Returns List of VMs. It is read onlyt attribute"""
        return self._VMs

    @VMs.setter
    def VMs(self, vm_list):
        """creates VMObject for list of VM passed
        Args:
            vmList    (list) - list of VMs for creating VM object
        """

        try:
            if isinstance(vm_list, list):
                for each_vm in vm_list:
                    self._VMs[each_vm] = VMHelper.HypervisorVM(self, each_vm)

            else:
                self._VMs[vm_list] = VMHelper.HypervisorVM(self, vm_list)
                self.log.info("VMs are %s" % self._VMs)

        except Exception as err:
            self.log.exception(
                "An exception occurred in creating object %s" % err)
            raise Exception(err)

    @abstractmethod
    def get_all_vms_in_hypervisor(self, server=""):
        """
        get all the Vms in Hypervisor

        Args:
                server    (str)    - specific hypervisor Host for which all Vms has to be fetched

        Return:
                Vmlist    (list)    - List of Vms in  in host of Pseudoclient
        """
        self.log.info("get all the VMs in hypervisor class")

    @abstractmethod
    def compute_free_resources(self, proxy_list, vm_list):
        """
        compute the free hosting hypervisor and free space for disk in hypervisor

        Args:
            proxy_list  - list of servers from which best has to be chosen

            vm_list     - list of Vm to be restored

        Return:
                host         (str)    - hypervisor host where vm is to be restored
                                            like esx, resourcegroup,region,hyperv host

                datastore    (str)    - diskspace where vm needs to be restored
                                            like destinationpath,datastore,bucket
        """
        self.log.info(
            "computes the free ESXHost and Datastore in case of VMware")

    def update_hosts(self):
        """
        update the Information of Host
        """
        self.log.info("Host Is updated")


class HyperVHelper(Hypervisor):
    """
    Main class for performing all operations on Hyperv Hyperviosr

    Methods:
            get_all_vms_in_hypervisor()        - abstract -get all the VMs in HYper-V Host

            compute_free_resources()        - compute the hyperv host and destiantion path
                                                    for perfoming restores

            mount_disk()                    - Mount the Vhd/VHDX and return the drive letter

            un_mount_disk()                    - Unmount the VHD mounted provided the path

            _get_datastore_dict()            - get the list of drives with space in Hyper-V

            _get_datastore_priority_list()    - return the drives in Hyper-V Host in
                                                    increasing order of disk size

            _get_proxy_priority_list()        - returns the proxy associated with that instance in
                                                    increasing order of memory

            _get_required_memory_for_restore()- Sum of Memory of the VM to be restored

            _get_required_diskspace_for_restore()- Sum of disk space of the VM to be restored

    """

    def __init__(self, server_host_name,
                 host_machine,
                 user_name,
                 password,
                 instance_type,
                 commcell):
        """
        Initialize Hyper-V Helper class properties
        """

        super(HyperVHelper, self).__init__(server_host_name, host_machine,
                                           user_name, password, instance_type, commcell)

        self.server_host_machine = self.commcell.clients.get(self.server_host_name)
        self.operation_ps_file = "GetHypervProps.ps1"
        self.disk_extension = [".vhd", ".avhd", ".vhdx", ".avhdx"]
        self.prop_dict = {
            "server_name": self.server_host_name,
            "vm_name": "$null",
            "extra_args": "$null"
        }

        self.operation_dict = {
            "server_name": self.server_host_name,
            "extra_args": "$null",
            "vhd_name": "$null"
        }

    def get_all_vms_in_hypervisor(self, server=""):
        """
        get all the Vms in Hypervisor

        Args:
                server    (str)    - specific hypervisor Host for which all Vms has to be fetched

        Return:
                Vmlist    (list)    - List of Vms in  in host of Pseudoclient
        """
        try:
            _all_vm_list = []
            if server == "":
                server_list = self.server_host_name

            else:
                server_list = [server]

            for _each_server in server_list:
                _ps_path = os.path.join(
                    self.utils_path, self.operation_ps_file)
                self.prop_dict["server_name"] = _each_server
                self.prop_dict["property"] = "GetAllVM"
                output = self.machine._execute_script(_ps_path, self.prop_dict)
                # _stdout, _stderr = VirtualServerUtils.ExecutePsFile(
                # _ps_path, _each_server, self.user_name, self.password, "", "GetAllVM")

                _stdout = output.output
                _stdout = _stdout.rsplit("=", 1)[1]
                _stdout = _stdout.strip()
                _temp_vm_list = _stdout.split(",")
                for each_vm in _temp_vm_list:
                    if each_vm != "":
                        each_vm = each_vm.strip()
                        if re.match("^[A-Za-z0-9_-]*$", each_vm):
                            _all_vm_list.append(each_vm)
                        else:
                            self.log.info(
                                "Unicode VM are not supported for now")

            return _all_vm_list

        except Exception as err:
            self.log.exception(
                "An exception occurred while getting all Vms from Hypervisor")
            raise Exception(err)

    def mount_disk(self, vm_obj, _vhdpath, destination_client=None):
        """
        mount the disk and return the drive letter mounted

        vm_obj -         (str)    - Vm helper object of the VM for which disk has to be mounted

        _vhdpath    (str)    - diks path has to be mounted

        destination_client  (obj)   - client where the disk to be mounted are located

        return:
                _drive_letter    (list)    - drive lettter in which disk is mounted

        Exception:
                if disk failed to mount

        """
        try:

            _drive_letter = vm_obj.mount_vhd(_vhdpath, destination_client)
            if not _drive_letter:
                self.log.error("VsHD might be corrupted mouting failed,")
                raise Exception("Cannot Mount the disk")

            else:
                self.log.info("Mounting restored VHD was succesfull")
                self.log.info("Drive letter is %s" % _drive_letter)
                return _drive_letter

        except Exception as err:
            self.log.exception(
                "exception raised in Mounting Disk , cannot proceed")
            raise err

    def un_mount_disk(self, vm_obj, _vhdpath):
        """
        unmount the disk taht is mounted

         vm_obj -         (str)    - Vm helper object of the VM for which disk has to be unmounted

        _vhdpath    (str)    - diks path has to be unmounted


        Exception:
                if disk failed to unmount

        """
        try:
            self.log.info("Trying to unmount diks %s" % _vhdpath)
            if not os.path.isdir(_vhdpath):
                self.log.info("VHD file exists...unmounting the file")
                vm_obj.un_mount_vhd(_vhdpath)
            else:
                self.log.info(
                    "Mountpath provided for cleanup...checking for vhd files")
                for root, dirs, files in os.walk(_vhdpath):
                    for file in files:
                        filename, ext = os.path.splitext(file)
                        if ((ext == ".vhd") or (ext == ".vhdx") or
                                            (ext == ".avhd") or (ext == ".avhdx")):
                            _vhdpath = os.path.join(root, file)
                            self.log.info("Found VHD file... " + _vhdpath)
                            vm_obj.un_mount_vhd(_vhdpath)

        except Exception as err:
            self.log.exception(
                "exception raised in UnMounting Disk , cannot proceed")
            raise err

    def _get_datastore_dict(self, proxy):
        """
        get the list of datastore in an proxy

        proxy                 (str)    - list of datastores in that particular
                                                                    proxy would be returned

        Return:
                disk_size_dict    (dict)    - with drive as keys and size
                                                as values in proxy provided
                                                        disk_size_dict = {'proxy-c':14586}

        """
        try:
            if proxy is None:
                proxy = self.server_host_name

            _disk_size_dict = {}

            _ps_path = os.path.join(self.utils_path, self.operation_ps_file)
            self.prop_dict["vm_name"] = proxy
            self.prop_dict["property"] = "DISKSIZE"
            output = self.machine._execute_script(_ps_path, self.prop_dict)

            _stdout = output.output
            if _stdout:
                _stdout = _stdout.strip()
                _stdout = _stdout.split("=")[1]
                _stdlines = [disk for disk in _stdout.split(",") if disk]
                for _each_disk in _stdlines:
                    _diskname = proxy + "-" + _each_disk.split("-")[0]
                    _disksize = _each_disk.split("-")[1]
                    _disk_size_dict[_diskname] = int(float(_disksize))

            return _disk_size_dict

        except Exception as err:
            self.log.exception("exception raised in GetDatastoreDict Disk ")
            raise err

    def _get_host_memory(self, proxy):
        """
        get the free memory in proxy

        Args:

                proxy     (str)    - list of datastores in that particular proxy would be returned

        return:
                val     (int)    - free  memory of Host in GB eg:; 3GB

        Exception:
                Raise exception when failed to get Memeory

        """
        try:
            if proxy is None:
                proxy = self.server_host_name

            _ps_path = os.path.join(self.utils_path, self.operation_ps_file)
            self.prop_dict["vm_name"] = proxy
            self.prop_dict["property"] = "HostMemory"
            output = self.machine._execute_script(_ps_path, self.prop_dict)

            _stdout = output.output
            if _stdout:
                _stdout = _stdout.strip()
                val = int(float(_stdout.split("=")[1]))
                return val

            else:
                raise Exception("Failed to get Memory")

        except Exception as err:
            self.log.exception("exception raised in GetMemory  ")
            raise err

    def _get_datastore_priority_list(self, vsa_proxy_list):
        """
        From the given list of proxy get all the details of drive and space
                                                                and order them in increasing size

        Args:
                vsa_proxy_list            (list)    - list of proxies which needs to be
                                                                    ordered as per disk size

        returns:
            _sorted_datastore_dict(dict)    - with disk proxy-drive name as keys and size as values
                                                        _sorted_datastore_dict = {'proxy-c':14586,
                                                                                  'proxy1-D':12456}

        """
        try:
            _datastore_dict = {}
            for _each_proxy in vsa_proxy_list:
                _datastoredict = self._get_datastore_dict(_each_proxy)
                _datastore_dict.update(_datastoredict)

            _sorted_datastore_dict = OrderedDict(sorted(_datastore_dict.items(),
                                                        key=itemgetter(1), reverse=True))

            return _sorted_datastore_dict

        except Exception as err:
            self.log.exception(
                "An Aerror occurred in  GetDatastorePriorityList ")
            raise err

    def _get_proxy_priority_list(self, vsa_proxy_list):
        """
        get the free host memory in proxy and arrange them with increarsing order

        Args:
                vsa_proxy_list            (list)    - list of proxies which needs to be
                                                    ordered as per Host Memory

        returns:
                _sorted_proxy_dict    (dict)    - with disk proxy name as keys and memory as values
                                                                _sorted_proxy_dict = {'proxy':5GB,
                                                                                     'proxy1':4GB}

        """
        try:

            _proxy_dict = {}
            for each_proxy in vsa_proxy_list:
                _proxy_memory = self._get_host_memory(each_proxy)
                _proxy_dict[each_proxy] = int(_proxy_memory)

            _sorted_proxy_dict = OrderedDict(sorted(_proxy_dict.items(),
                                                    key=itemgetter(1), reverse=True))
            return _sorted_proxy_dict

        except Exception as err:
            self.log.exception("An Aerror occurred in  GetProxyPriorityList ")
            raise err

    def _get_required_memory_for_restore(self, vm_list):
        """
        sums up all the memory of needs to be restores(passed as VM list)

        Args:
                vm_list    (list)    - list of vm to be restored

        returns:
                sum of total memory of VM to be restored in Gb
        """
        try:

            _vm_total_memory = 0
            for _each_vm in vm_list:
                if self.VMs[_each_vm].GuestOS == "Windows":
                    self.VMs[_each_vm].update_vm_info('Memory')
                    _vm_memory = self.VMs[_each_vm].Memory.strip()
                    _vm_total_memory = _vm_total_memory + int(_vm_memory)

            return _vm_total_memory

        except Exception as err:
            self.log.exception(
                "An Aerror occurred in  _get_required_memory_for_restore ")
            raise err

    def _get_required_diskspace_for_restore(self, vm_list):
        """
        sums up all the disk space of needs to be restores(passed as VM list)

        Args:
                vm_list    (list)    - list of vm to be restored

        returns:
                sum of total disk space of VM to be restored
        """
        try:

            _vm_total_disk_size = 0
            for _each_vm in vm_list:
                if self.VMs[_each_vm].GuestOS == "Windows":
                    storage_details = self.VMs[_each_vm].machine.get_storage_details()
                    _vm_total_disk_size += int(storage_details['total'])
            _vm_total_disk_size = int(_vm_total_disk_size / 1024)
            return _vm_total_disk_size

        except Exception as err:
            self.log.exception(
                "An error occurred in  _get_required_diskspace_for_restore ")
            raise err

    def get_disk_in_the_path(self, folder_path):
        """
         get all the disks in the folder

        Args:
            folder_path     (str)   - path of the folder from which disk needs to be listed
                                        e.g: C:\\CVAutomation

         Returns:
                disk_list   (list)-   list of disks in the folder

        Raises:
            Exception:
                if failed to get the list of files
        """
        try:
            _disk_list = []
            output = self.machine.get_files_in_path(folder_path)

            for value in output:
                disk_name = value[0]
                if any(re.search(ext, disk_name.lower()) for ext in self.disk_extension):
                    _disk_list.append(disk_name)

            return _disk_list

        except Exception as err:
            self.log.exception(
                "Exception occurred {0} in getting disk list".format(err))

    def compute_free_resources(self, proxy_list, vm_list):
        """
        compute the free hosting hypervisor and free space for disk in hypervisor

        Args:
                proxy_list    (list)    -list of proxies from which best proxy has to found

                vm_list        (list) - list of Vms to be restored

        return:
                proxy_name    (str)    - the proxy where restore can be performed

                datastore_name(str)    - datastore where restore has to be performed
        """
        try:

            proxy_name = None
            datastore_name = None
            _proxy_priority_dict = self._get_proxy_priority_list(proxy_list)
            _datastore_priority_dict = self._get_datastore_priority_list(
                proxy_list)
            _total_vm_memory = self._get_required_memory_for_restore(vm_list)
            _total_disk_space = self._get_required_diskspace_for_restore(
                vm_list)
            for each_datastore in _datastore_priority_dict.items():
                if (each_datastore[1]) > _total_disk_space:
                    datastore_name = each_datastore[0].split("-")[1]
                    proxy_name = each_datastore[0].split("-")[0]
                    self.log.info(
                        "The Datastore %s has more than total disk space in VM" % datastore_name)
                    if _proxy_priority_dict[proxy_name] > _total_vm_memory:
                        self.log.info(
                            "the Proxy %s has higher memory than the total VMs" % proxy_name)
                        break
                    else:
                        continue
                else:
                    continue

            return proxy_name, datastore_name

        except Exception as err:
            self.log.exception("An Aerror occurred in  ComputeFreeResources ")
            raise err

    def copy_test_data_to_each_volume(self, vm_name, _drive, backup_folder, _test_data_path,
                                      machine=None):
        """
        copy testdata to each volume in the vm provided


        Args:
                vm_name    (str)        - vm to which test data has to be copied

                _drive(str)            - Drive letter where data needs to be copied

                _test_data_path(str) - path where testdata needs to be generated

                backup_folder(str)  - name of the folder to be backed up

                machine(obj)        - the machine class object of the controller

        Exception:

                if fails to generate testdata

                if fails to copy testdata

        """

        try:



            # initializing prerequisites
            _failed_file_list = []

            # create Base dir
            _dest_base_path = os.path.join(_drive, os.path.sep, backup_folder)
            if not self.VMs[vm_name].machine.check_directory_exists(_dest_base_path):
                _create_dir = self.VMs[vm_name].machine.create_directory(_dest_base_path)
                if not _create_dir:
                    _failed_file_list.append(_dest_base_path)

            _dest_base_path = os.path.join(_dest_base_path, "TestData")
            # here create machine object with localhost as machine name for other
            # hypervisors for Hyper-V the same server name can act as controller

            self.log.info("Generating test data was successful now copying it")
            self.VMs[vm_name].machine.copy_from_local(_test_data_path, _dest_base_path)

        except Exception as err:
            self.log.exception(
                "An error occurred in  Copying test data to Vm  ")
            raise err


class FusionComputeHelper(Hypervisor):
    """
    Main class for performing all operations on Fusion Compute Hypervisor
    """

    def __init__(self, server_host_name,
                 host_machine,
                 user_name,
                 password,
                 instance_type,
                 commcell):

        super(FusionComputeHelper, self).__init__(server_host_name, host_machine,
                                           user_name, password, instance_type, commcell)
        self._services = FusionComputeServices.get_services(self.server_host_name)
        self._headers = {
            'Accept': 'application/json',
            'Content-type': 'application/json',
            'Accept-Language': 'en_US',
            }

        self.version = self.get_version()

        self._vm_services = FusionComputeServices.get_vm_services(self.server_host_name, self._get_site_url())

    def get_version(self):
        """
        Get the Fusion Compute Hypervisor Version Provided
        :return:
            version    (str)    : version of the Fusion COmpute Hypervisor
        """

        try:
            flag, response = self._make_request('GET', self._services['GET_VERSION'])
            if flag:
                latest_version = response.json()["versions"][-1]
                self._headers["version"] = latest_version["version"]

            return latest_version["version"]

        except Exception as err:
            self.log.exception("An exception {0} occurred getting version from VRM".format(err))
            raise Exception(err)

    def _compute_login(self):
        """
        Does login to the Fusion compute Hypervisor
        :return:
            set the token in headers
        """

        try:
            self._headers['X-Auth-User'] = self.user_name
            self._headers['X-Auth-Key'] = self.password
            self._headers['X-Auth-AuthType'] = 0
            self._headers['X-Auth-UserType'] = 0
            flag, response = self._make_request('POST', self._services['LOGIN'])
            if flag:
                self._headers['X-Auth-Token'] = response.headers['x-auth-token']
                self._headers.pop('X-Auth-User', None)
                self._headers.pop('X-Auth-Key', None)
                self._headers.pop('X-Auth-AuthType', None)
                self._headers.pop('X-Auth-UserType', None)

        except Exception as err:
            self.log.exception("An exception occurred while logging in to the VRM")
            raise Exception(err)

    def _make_request(self, method, url, payload=None, attempts=0):
        """Makes the request of the type specified in the argument 'method'

        Args:
            method    (str)         --  http operation to perform, e.g.; GET, POST, PUT, DELETE

            url       (str)         --  the web url or service to run the HTTP request on

            payload   (dict / str)  --  data to be passed along with the request
                default: None

            attempts  (int)         --  number of attempts made with the same request
                default: 0

        Returns:
            tuple:
                (True, response) - in case of success

                (False, response) - in case of failure

        Raises:
            Fusion Compute SDK Exception:
                if the method passed is incorrect/not supported

            requests Connection Error   --  requests.exceptions.ConnectionError

        """
        try:
            headers = self._headers

            if method == 'POST':
                response = requests.post(url, headers=headers, verify=True, auth=payload)
            elif method == 'GET':
                response = requests.get(url, headers=headers, verify=True)
            elif method == 'PUT':
                response = requests.put(url, headers=headers, verify=True, json=payload)
            elif method == 'DELETE':
                response = requests.delete(url, headers=headers, verify=True)
            else:
                raise Exception('HTTP method {} not supported'.format(method))

            if response.status_code == 401 and headers['X-Auth-Token'] is not None:
                if attempts < 3:
                    self._compute_login()
                    return self._make_request(method, url, attempts + 1)
                else:
                    # Raise max attempts exception, if attempts exceeds 3
                    raise Exception('Error', '103')

            elif response.status_code == 200:
                return True, response
            else:
                return False, response

        except requests.exceptions.ConnectionError as con_err:
            raise Exception(con_err)

    def _get_site_url(self):
        """
        Get the site urn for the Fusion VRM
        :return:
            site_url (str)  - site url for querying about VMs
        """

        try:
            flag, response = self._make_request('GET', self._services['GET_SITES'])
            if flag:
                uri = response['sites']['uri']
                vm_url = 'https://{0}/{1}'.format(self.server_host_name, uri)

            return vm_url

        except Exception as err:
            self.log.exception("An exception {0} occurred getting version from VRM".format(err))
            raise Exception(err)

    def get_all_vms_in_hypervisor(self, server=""):
        """
       Get all the vms for Fusion Compute

       Args:
            server (str)   -  VRM  for which all the VMs has to be fetched

       Returns:
           _all_vm_list    (str)   -   List of VMs in the host of the pseudoclient
       """

        try:
            _temp_vm_list = []
            vm_list = []
            flag, response = self._make_request('GET', self._vm_services['GET_VMS'])
            if flag:
                vm_list_response = response['vms']
                for vm in vm_list_response:
                    self.vm_dict[vm['name']] = vm['uri']
                    _temp_vm_list.append(vm['name'])

            for each_vm in _temp_vm_list:
                if each_vm != "":
                    each_vm = each_vm.strip()
                    if re.match("^[A-Za-z0-9_-]*$", each_vm):
                        vm_list.append(each_vm)
                    else:
                        self.log.info(
                            "Unicode VM are not supported for now")

            return vm_list

        except Exception as err:
            self.log.exception("An exception {0} occurred getting VMs from VRM".format(err))
            raise Exception(err)

    def _get_datastore_dict(self):
        """
        Get the list of datastore in an Host in VRM

        Args:

        Return:
                _disk_size_dict	(dict)	- Datastores with name name free spaces

        """
        try:
            _disk_size_dict = {}
            flag, response = self._make_request('GET', self._vm_services['GET_DATASTORES'])
            if flag:
                disk_list_response = response['datastores']
                for disk in disk_list_response:
                    _disk_size_dict[disk['name']] = disk['actualFreeSizeGB']

            return _disk_size_dict

        except Exception as err:
            self.log.exception("An exception {0} occurred getting datastores  from VRM".format(err))
            raise Exception(err)

    def _get_host_dict(self):
        """
        Get the list of hosts  in VRM

        Args:

        Return:
                _host_dict	(dict)	- host with name and freememory

        """
        try:
            _host_dict = {}
            flag, response = self._make_request('GET', self._vm_services['GET_HOSTS'])
            if flag:
                host_dict_response = response['hosts']
                for host in host_dict_response:
                    _host_dict[host['name']] = (host['memQuantityMB'])/1024

            return _host_dict

        except Exception as err:
            self.log.exception("An exception {0} occurred getting hosts  from VRM".format(err))
            raise Exception(err)

    def _get_datastore_priority_list(self):
        """
        Returns the descending sorted datastore Dict according to free space
        Args:

        returns:
                _sorted_datastore_dict  (dict)  -   Returns the descending
                sorted datastore dict according to free space
        """
        try:
            _datastore_dict = self._get_datastore_dict()
            _sorted_datastore_dict = OrderedDict(sorted
                                                 (_datastore_dict.items(),
                                                  key=itemgetter(1), reverse=True))
            return _sorted_datastore_dict

        except Exception as err:
            self.log.exception("An exception {0} occurred getting datastore priority list from VRM".format(err))
            raise Exception(err)

    def _get_host_priority_list(self):
        """
        Returns the descending sorted host Dict according to Memory
        Args:

        returns:
                _sorted_host_dict  (dict)  -   Returns the descending
                sorted datastore dict according to Memory
        """
        try:
            _host_dict = self._get_host_dict()
            _sorted_host_dict = OrderedDict(sorted
                                                 (_host_dict.items(),
                                                  key=itemgetter(1), reverse=True))
            return _sorted_host_dict

        except Exception as err:
            self.log.exception("An exception {0} occurred getting host priority list from VRM".format(err))
            raise Exception(err)

    def _get_required_resource_for_restore(self, vm_list):
        """
        get the required resource for restore
        :param vm_list:  list of Vms for restore
        :return:
            _vm_total_memory    (int)   -   Total memory required for restoring
            _vm_total_space (int)   -   Total disk space required for restoring
        """

        try:
            _vm_total_memory = 0
            _vm_total_space = 0
            for _each_vm in vm_list:
                self.VMs[_each_vm].update_vm_info('Memory')
                _vm_memory = self.VMs[_each_vm].Memory
                self.VMs[_each_vm].update_vm_info('VMSpace')
                _vm_space = self.VMs[_each_vm].VMSpace
                _vm_total_memory = _vm_total_memory + float(_vm_memory)
                _vm_total_space = _vm_total_space + float(_vm_space)
            return _vm_total_memory, _vm_total_space

        except Exception as err:
            self.log.exception(
                "An Aerror occurred in  _get_required_memory_for_restore ")
            raise err

    def compute_free_resources(self, vm_list):
        """
        compute the free Resource of the Vcenter based on free memory and cpu

        Args:

                vm_list		(list) - list of Vms to be restored

        return:
                Datastore	(str)	- the Datastore where restore can be performed

                Host     (str)	- Host where restore has to be performed

        """
        try:
            datastore_name = None
            host_name = None
            _datastore_priority_dict = self._get_datastore_priority_list()
            _host_priority_dict = self._get_host_priority_list()
            _total_vm_memory, _total_disk_space = self._get_required_resource_for_restore(vm_list)
            for each_datastore in _datastore_priority_dict.items():
                if (each_datastore[1]) > _total_disk_space:
                    datastore_name = each_datastore[0]
                    self.log.info(""
                                  "The Datastore %s has more than total"
                                  "disk space in VM" % datastore_name)
                    break
                else:
                    continue

            for each_host in _host_priority_dict.items():
                if (each_host[1]) > _total_vm_memory :
                    self.log.info(
                        "the Host %s has higher "
                        "memory than the total VMs" % each_host[1])
                    host_name = each_host[0]
                    break
                else:
                    continue

            return datastore_name, host_name

        except Exception as err:
            self.log.exception("An exception {0} occurred in computing free resources for restore".format(err))
            raise Exception(err)

